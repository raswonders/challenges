function findEmirp(n){
  let digitCount = n.toString().length;
  let primes = sieveOfEratosthenes(Math.pow(10, digitCount));
  let primesInRange = primes.filter(prime => prime <= n)

  let emirps = primesInRange.filter((prime, i) => {
    let reversePrime =  Number(String(prime).split("").reverse().join(""));
    let isPalindrom = (prime === reversePrime);
    if (isPalindrom) return false;
    return primes.includes(reversePrime);
  })
  
  
  return [emirps.length,
          Math.max(...emirps),
          emirps.reduce((acc, curr) => acc += curr)];
}

function sieveOfEratosthenes(n) {
  let primes = new Array(n + 1).fill(true);
  primes[0] = false;
  primes[1] = false;
  for (let i = 2; i <= Math.sqrt(n); i++) {
    for (let j = 2; i * j <= n; j++) {
      primes[i * j] = false;
    }
  }

  let result = [];
  for (let i = 0; i < primes.length; i++) {
    if (primes[i]) {
      result.push(i);
    }
  }
  return result;
}